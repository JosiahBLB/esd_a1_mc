
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108f  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da0  00000000  00000000  0000150b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054f  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000027fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000642  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000125  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003057  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	c3 c0       	rjmp	.+390    	; 0x1ec <__vector_25>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
  92:	00 00       	nop
  94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
  96:	00 00       	nop
  98:	77 00       	.word	0x0077	; ????
  9a:	7d 00       	.word	0x007d	; ????
  9c:	80 00       	.word	0x0080	; ????
  9e:	83 00       	.word	0x0083	; ????
  a0:	86 00       	.word	0x0086	; ????
  a2:	89 00       	.word	0x0089	; ????
  a4:	d3 00       	.word	0x00d3	; ????
  a6:	d3 00       	.word	0x00d3	; ????
  a8:	d3 00       	.word	0x00d3	; ????
  aa:	d3 00       	.word	0x00d3	; ????
  ac:	8c 00       	.word	0x008c	; ????
  ae:	92 00       	.word	0x0092	; ????
  b0:	a8 00       	.word	0x00a8	; ????
  b2:	be 00       	.word	0x00be	; ????

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d0 e2       	ldi	r29, 0x20	; 32
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ac 30       	cpi	r26, 0x0C	; 12
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	8a d0       	rcall	.+276    	; 0x1e6 <main>
  d2:	1f c1       	rjmp	.+574    	; 0x312 <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <executeInstruction>:
#include "instructions.h"


void executeInstruction()
{
	switch (parsed_data.instruction)
  d6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <parsed_data>
  da:	8e 2f       	mov	r24, r30
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8e 30       	cpi	r24, 0x0E	; 14
  e0:	91 05       	cpc	r25, r1
  e2:	08 f0       	brcs	.+2      	; 0xe6 <executeInstruction+0x10>
  e4:	60 c0       	rjmp	.+192    	; 0x1a6 <executeInstruction+0xd0>
  e6:	fc 01       	movw	r30, r24
  e8:	e4 5b       	subi	r30, 0xB4	; 180
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	09 c1       	rjmp	.+530    	; 0x300 <__tablejump2__>
	{
	case TX_CHECK:
		sendUsart(TX_CHECK);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	f3 d0       	rcall	.+486    	; 0x2d8 <sendUsart>
		parsed_data.instruction = DEFAULT;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <parsed_data>
		break;
		
	case READ_PINA:
		sendUsart(PORTC);
  f8:	08 95       	ret
  fa:	88 b1       	in	r24, 0x08	; 8
		break;
  fc:	ed c0       	rjmp	.+474    	; 0x2d8 <sendUsart>
		
	case READ_POT1:
		sendAdcUsart(pot1);
  fe:	08 95       	ret
 100:	81 e6       	ldi	r24, 0x61	; 97
		break;
 102:	f4 c0       	rjmp	.+488    	; 0x2ec <sendAdcUsart>
		
	case READ_POT2:
		sendAdcUsart(pot2);
 104:	08 95       	ret
 106:	82 e6       	ldi	r24, 0x62	; 98
		break;
		
	case READ_TEMP:
		sendAdcUsart(tempSensor);
 108:	f1 c0       	rjmp	.+482    	; 0x2ec <sendAdcUsart>
 10a:	08 95       	ret
 10c:	83 e6       	ldi	r24, 0x63	; 99
		break;
 10e:	ee c0       	rjmp	.+476    	; 0x2ec <sendAdcUsart>
		
	case READ_LDR:
		sendAdcUsart(lightSensor);
 110:	08 95       	ret
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	eb c0       	rjmp	.+470    	; 0x2ec <sendAdcUsart>
		break;
 116:	08 95       	ret
		
	case SET_PORTC:
		PORTC = parsed_data.setValue;
 118:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <parsed_data+0x1>
 11c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <parsed_data+0x2>
 120:	88 b9       	out	0x08, r24	; 8
		break;
 122:	08 95       	ret
		
	case SET_HEATER:
		if(parsed_data.setValue > 0)
 124:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <parsed_data+0x1>
 128:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <parsed_data+0x2>
 12c:	89 2b       	or	r24, r25
 12e:	21 f0       	breq	.+8      	; 0x138 <executeInstruction+0x62>
			heaterOn;
 130:	84 b1       	in	r24, 0x04	; 4
 132:	80 68       	ori	r24, 0x80	; 128
 134:	84 b9       	out	0x04, r24	; 4
 136:	03 c0       	rjmp	.+6      	; 0x13e <executeInstruction+0x68>
		else
			heaterOff;
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	84 b9       	out	0x04, r24	; 4
		OCR1C = parsed_data.setValue;
 13e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <parsed_data+0x1>
 142:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <parsed_data+0x2>
 146:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
 14a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
		break;
 14e:	08 95       	ret
		
	case SET_LAMP:
		if(parsed_data.setValue > 0)
 150:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <parsed_data+0x1>
 154:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <parsed_data+0x2>
 158:	89 2b       	or	r24, r25
 15a:	21 f0       	breq	.+8      	; 0x164 <executeInstruction+0x8e>
			lampOn;
 15c:	84 b1       	in	r24, 0x04	; 4
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	84 b9       	out	0x04, r24	; 4
 162:	03 c0       	rjmp	.+6      	; 0x16a <executeInstruction+0x94>
		else
			lampOff;
 164:	84 b1       	in	r24, 0x04	; 4
 166:	8f 7b       	andi	r24, 0xBF	; 191
 168:	84 b9       	out	0x04, r24	; 4
		OCR1B = parsed_data.setValue;
 16a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <parsed_data+0x1>
 16e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <parsed_data+0x2>
 172:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 176:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		break;
 17a:	08 95       	ret
		
	case SET_MOTOR:
		if(parsed_data.setValue > 0)
 17c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <parsed_data+0x1>
 180:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <parsed_data+0x2>
 184:	89 2b       	or	r24, r25
 186:	21 f0       	breq	.+8      	; 0x190 <executeInstruction+0xba>
			motorOn;
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	84 b9       	out	0x04, r24	; 4
 18e:	03 c0       	rjmp	.+6      	; 0x196 <executeInstruction+0xc0>
		else
			motorOff;
 190:	84 b1       	in	r24, 0x04	; 4
 192:	8f 7d       	andi	r24, 0xDF	; 223
 194:	84 b9       	out	0x04, r24	; 4
		OCR1A = parsed_data.setValue;
 196:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <parsed_data+0x1>
 19a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <parsed_data+0x2>
 19e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1a6:	08 95       	ret

000001a8 <setup>:
    }
}

void setup(void)
{
	cli(); // Clear interrupts
 1a8:	f8 94       	cli
	
	// I/O
	DDRC = 0xFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 b9       	out	0x07, r24	; 7
	
	// USART
	UCSR1B = 0b10010000;//enable receiver and it's interrupt
 1ae:	90 e9       	ldi	r25, 0x90	; 144
 1b0:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = 0b00000110;//1 stop bit, 8 bit character size, no parity bits
 1b4:	96 e0       	ldi	r25, 0x06	; 6
 1b6:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	UBRR1L = 12;//Baud rate set to 38400
 1ba:	9c e0       	ldi	r25, 0x0C	; 12
 1bc:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// ADC
	ADCSRA = 0b11100111; // Enable ADC, start conversion, free running mode, slowest speed
 1c0:	97 ee       	ldi	r25, 0xE7	; 231
 1c2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// 16-bit timer
	TCCR1A = 0b11111110; // A, B and C fast PWM, ICR1 as top
 1c6:	9e ef       	ldi	r25, 0xFE	; 254
 1c8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00011001; // ICR1 as top, no pre-scaling
 1cc:	99 e1       	ldi	r25, 0x19	; 25
 1ce:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR1 = 399; // 20kHz
 1d2:	2f e8       	ldi	r18, 0x8F	; 143
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1da:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	sei(); // Set interrupts
 1de:	78 94       	sei
	
	parsed_data.instruction = 0xFF;
 1e0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <parsed_data>
 1e4:	08 95       	ret

000001e6 <main>:
#include "instructions.h"


int main(void)
{	
    setup();
 1e6:	e0 df       	rcall	.-64     	; 0x1a8 <setup>
    while (1) 
    {
		executeInstruction();
 1e8:	76 df       	rcall	.-276    	; 0xd6 <executeInstruction>
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x2>

000001ec <__vector_25>:
 1ec:	1f 92       	push	r1
	
	parsed_data.instruction = 0xFF;
}

ISR(USART1_RX_vect)
{
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	0b b6       	in	r0, 0x3b	; 59
 1f8:	0f 92       	push	r0
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	readUsart();
 212:	13 d0       	rcall	.+38     	; 0x23a <readUsart>
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0b be       	out	0x3b, r0	; 59
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <readUsart>:
#include "usart.h"


void readUsart(void)
{
	switch (rxState)
 23a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxState>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	19 f0       	breq	.+6      	; 0x248 <readUsart+0xe>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	81 f0       	breq	.+32     	; 0x266 <readUsart+0x2c>
 246:	08 95       	ret
	{
		case IDLE:
			if (UDR1 == START_BYTE)
 248:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 24c:	83 35       	cpi	r24, 0x53	; 83
 24e:	39 f4       	brne	.+14     	; 0x25e <readUsart+0x24>
			*p_buffer = UDR1;
 250:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 254:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 258:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 25c:	80 83       	st	Z, r24
			rxState = READ;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxState>
			break;
 264:	08 95       	ret
			
		case READ:
			if ((p_buffer == &buffer[5]) || (UDR1 == STOP_BYTE)) // if end of array or stop byte received
 266:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 26a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26e:	87 50       	subi	r24, 0x07	; 7
 270:	91 40       	sbci	r25, 0x01	; 1
 272:	21 f0       	breq	.+8      	; 0x27c <readUsart+0x42>
 274:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 278:	8a 3a       	cpi	r24, 0xAA	; 170
 27a:	e9 f4       	brne	.+58     	; 0x2b6 <readUsart+0x7c>
			{
				parsed_data.instruction = buffer[1];
 27c:	e2 e0       	ldi	r30, 0x02	; 2
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	81 81       	ldd	r24, Z+1	; 0x01
 282:	a9 e0       	ldi	r26, 0x09	; 9
 284:	b1 e0       	ldi	r27, 0x01	; 1
 286:	8c 93       	st	X, r24
				parsed_data.setValue = (buffer[2] << 8) + buffer[3];
 288:	82 81       	ldd	r24, Z+2	; 0x02
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	98 2f       	mov	r25, r24
 28e:	88 27       	eor	r24, r24
 290:	23 81       	ldd	r18, Z+3	; 0x03
 292:	82 0f       	add	r24, r18
 294:	91 1d       	adc	r25, r1
 296:	12 96       	adiw	r26, 0x02	; 2
 298:	9c 93       	st	X, r25
 29a:	8e 93       	st	-X, r24
 29c:	11 97       	sbiw	r26, 0x01	; 1
				memset(buffer, 0, 6*sizeof(char));
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	df 01       	movw	r26, r30
 2a2:	1d 92       	st	X+, r1
 2a4:	8a 95       	dec	r24
 2a6:	e9 f7       	brne	.-6      	; 0x2a2 <readUsart+0x68>
				p_buffer = buffer;
 2a8:	f0 93 01 01 	sts	0x0101, r31	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ac:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <__DATA_REGION_ORIGIN__>
				rxState = IDLE;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxState>
			}
			*p_buffer = UDR1;
 2b6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ba:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2be:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2c2:	80 83       	st	Z, r24
			p_buffer++;
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d6:	08 95       	ret

000002d8 <sendUsart>:
	}
}

void sendUsart(char byte_to_send)
{
	while(txBufferFull); 
 2d8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2dc:	95 ff       	sbrs	r25, 5
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <sendUsart>
	UDR1 = byte_to_send;
 2e0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	parsed_data.instruction = DEFAULT;
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <parsed_data>
 2ea:	08 95       	ret

000002ec <sendAdcUsart>:
}

void sendAdcUsart(char input_device)
{
	ADMUX = input_device;
 2ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	while(converisonRunning);
 2f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 2f4:	86 fd       	sbrc	r24, 6
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <sendAdcUsart+0x4>
	sendUsart(ADCH);
 2f8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2fc:	ed cf       	rjmp	.-38     	; 0x2d8 <sendUsart>
 2fe:	08 95       	ret

00000300 <__tablejump2__>:
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	00 24       	eor	r0, r0
 306:	00 1c       	adc	r0, r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	07 90       	elpm	r0, Z+
 30c:	f6 91       	elpm	r31, Z
 30e:	e0 2d       	mov	r30, r0
 310:	09 94       	ijmp

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
